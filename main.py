import redis
import json
import random


class Chatbot:
    def __init__(self, host='redis', port=6379):
        self.client = redis.StrictRedis(host=host, port=port, decode_responses=True)
        self.pubsub = self.client.pubsub()
        self.username = None

    def introduce(self):
        # 2.	[5 POINTS] Chatbot Initialization 
        """
        Provide an introduction and list of commands, along with the main menu.
        """
        intro = """
        Hello! I'm your friendly Redis chatbot.
        Here are the commands this bot supports:
        !help: List of commands
        !weather <city>: Weather update
        !fact: Random fun fact
        !whoami: Your user information
        """
        menu = """
        Options:
        1: Identify yourself
        2: Join a channel
        3: Leave a channel
        4: Send a message to a channel
        5: Get info about a user
        6: Exit
        """
        print(intro)
        print(menu)

    def identify(self):
        """
        Ask the user to input their details and store them in Redis as a hash.
        """
        #3.	[10 POINTS] User Identification:
        self.username = input("Enter your username: ")
        age = input("Enter your age: ")
        gender = input("Enter your gender: ")
        location = input("Enter your location: ")

        # Store user details in Redis
        user_info = {
            'age': age,
            'gender': gender,
            'location': location
        }
        # use hash for storing
        self.client.hset(f"user:{self.username}", mapping=user_info)
        print(f"Hello, {self.username}! You've been identified.")

    def process_commands(self, command):
        """
        Handle special commands like !help, !weather, !fact, and !whoami.
        """
        #5.	[20 POINTS] The chatbot should recognize the following special commands and provide automated responses to them.
        if command == "!help":
            self.introduce()

        elif command.startswith("!weather"):
            parts = command.split(' ')
            if len(parts) > 1 and parts[1].strip():  # Check if a city name is provided
                city = parts[1]
                # Static data for the weather
                weather_info = f"The weather in {city} is sunny with a temperature of 25Â°C."
                print(weather_info)
            else:
                print("Please provide a city name for the weather update. Example: !weather London")

        elif command == "!fact":
            # random facts are stored in python, and these facts are generated by chatgpt
            facts = [
                "Honey never spoils.",
                "A single strand of spaghetti is called a spaghetto.",
                "The Eiffel Tower can be 15 cm taller during summer."
            ]
            # rendomly choose a fact
            fact = random.choice(facts)
            print(f"Fun Fact: {fact}")

        elif command == "!whoami":
            if self.username:
                # get all user info from hash
                user_info = self.client.hgetall(f"user:{self.username}")
                if user_info:
                    print(f"Username: {self.username}, Age: {user_info.get('age')}, Gender: {user_info.get('gender')}, Location: {user_info.get('location')}")
                else:
                    print(f"No information found for user: {self.username}")
            else:
                print("You are not identified. Please identify yourself first.")
        else:
            print("Unknown command. Type !help for a list of available commands.")

    def join_channel(self, channel_name):
        """
        Subscribe to a Redis Pub/Sub channel and listen for messages.
        Simple message print functionality.
        """
        # 4.	[20 POINTS] Channels:
        pubsub = self.client.pubsub()
        pubsub.subscribe(channel_name)

        print(f"Listening to channel: {channel_name} ...")
        for message in pubsub.listen():
            if message['type'] == 'message':
                print(f"[{channel_name}] {message['data']}")  # Raw message print

    def leave_channel(self, channel):
        """
        Unsubscribe the user from a Redis Pub/Sub channel. No identification required.
        """
        # 4.	[20 POINTS] Channels:
        self.pubsub.unsubscribe(channel)
        print(f"You have left the channel: {channel}")

    def send_message(self, channel, message):
        """
        Publish a message to a channel, but only if the user is identified.
        """
        # 4.	[20 POINTS] Channels:
        if not self.username:
            print("You must identify yourself first before sending a message.")
        else:
            # Publish message as a JSON object for structured data
            message_data = {
                'username': self.username,
                'message': message
            }
            self.client.publish(channel, json.dumps(message_data))
            print(f"Message sent to {channel}: {message}")

    def get_user_info(self, username):
        """
        Retrieve user information from Redis based on their username.
        """
        # get info from hash
        user_info = self.client.hgetall(f"user:{username}")
        if user_info:
            print(f"Info for {username}: Username: {username}, Age: {user_info.get('age')}, Gender: {user_info.get('gender')}, Location: {user_info.get('location')}")
        else:
            print(f"No information found for user: {username}")

    def run(self):
        """
        Run the chatbot by showing options and executing user choices.
        """
        valid_commands = ["!help", "!weather", "!fact", "!whoami"]

        while True:
            self.introduce()  # Show the introduction and menu at every iteration

            choice = input("Enter your choice or command (!help, !weather, !fact, !whoami): ")

            if choice == '1':
                self.identify()
            elif choice == '2':
                channel = input("Enter channel name to join: ")
                self.join_channel(channel)
            elif choice == '3':
                channel = input("Enter channel name to leave: ")
                self.leave_channel(channel)
            elif choice == '4':
                channel = input("Enter channel name to send a message to: ")
                message = input("Enter your message: ")
                self.send_message(channel, message)
            elif choice == '5':
                username = input("Enter username to get info about: ")
                self.get_user_info(username)
            elif choice == '6':
                print("Goodbye!")
                break
            # Handle only valid commands
            elif choice.split()[0] in valid_commands:
                self.process_commands(choice)
            else:
                print("Invalid choice or command. Please try again.")

if __name__ == "__main__":
    bot = Chatbot()
    bot.run()
